generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

model User {
  id          String     @id @default(uuid())
  name        String
  email       String     @unique
  phoneNumber String?
  password    String
  role        Role       @default(USER)
  status      UserStatus @default(ACTIVE)
  bookings    Booking[]
  classes     Class[]
  payments    Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ClassStatus {
  SCHEDULE
  CANCELLED
  COMPLETED
}

model Class {
  id             String      @id @default(uuid())
  title          String
  teacherId      String
  description    String?
  start          DateTime
  end            DateTime
  status         ClassStatus @default(SCHEDULE)
  location       String?
  address        String?
  totalSlots     Int
  availableSlots Int
  bookingPrice   Float?
  bookings       Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teacher User @relation(fields: [teacherId], references: [id])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model Booking {
  id        String        @id @default(uuid())
  userId    String
  classId   String
  expiresAt DateTime
  status    BookingStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  class   Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  payment Payment?
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Payment {
  id        String        @id @default(uuid())
  userId    String
  bookingId String        @unique
  amount    Float
  currency  String
  status    PaymentStatus @default(PENDING)

  booking Booking @relation(fields: [bookingId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
